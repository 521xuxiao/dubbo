Dubbo

dubbo是java开发的，所以用Dubbo必须先安装jdk

 
一. 单台zookeeper
	1.下载zookeeper.tar.gz 安装包
	2.拖进Linux系统，tar -xvf zookeeper.tar.gz 解压
	3.在zookeeper的根目录里面创建data和log文件夹，存放日志
	4.找到zookeeper的根目录，进到conf文件夹里面有个zoo_sample.cfg文件
	5.修改  dataDir=/usr/local/src/zookeeper/zookeeper3.4/data
			dataLogDir=/usr/local/src/zookeeper/zookeeper3.4/log
	6.cd到bin目录里面，运行  sh zkServer.sh start 运行zookeeper服务
							 sh zkServer.sh stop 
							 sh zkServer.sh status

二. 集群
	
	1.在zookeeper里面创建cluster文件夹
	2.在zookeeper里面创建zoo1 zoo2 zoo3
	3.在zoo1里面创建data和log 在zoo2里面创建data和log 在zoo3里面创建data和log
	4.在data里面创建myid文件，分别对应1， 2， 3
	5.cd到conf文件夹里面复制zoo_simple_cfg文件,分别为zoo1.cfg  zoo2.cfg  zoo3.cfg
	6.更改  dataDir=/usr/local/src/zookeeper/zookeeper3.4/cluster/zoo1/data
			dataLogDir=/usr/local/src/zookeeper/zookeeper3.4/cluster/zoo1/log
			clientPort=2181
			server.1=192.168.203.128:2887:3887
			server.2=192.168.203.128:2888:3888
			server.3=192.168.203.128:2889:3889
		最下面的三行都是一样的
	7.cd到bin目录下启动zookeeper服务即可  sh zkServer.sh start zoo1.cfg
									      sh zkServer.sh start zoo2.cfg
										  sh zkServer.sh start zoo3.cfg
										  
										  
三. Dubbo的负载均衡
	1.随机策略（默认）
		在消费者（controller）里面@Reference(timeout=3000, check=true, loadbalance="random")
	2.轮询策略
		在消费者（controller）里面@Reference(timeout=3000, check=true, loadbalance="roundrobin")
	3.ip hash策略
		consistenthash
	4.最小活跃数
		leastactive
		
四. sso单点登录+dubbo
	用户把用户名和密码发给后台，后台进行查询数据库，匹配到就生成一个UUID作为token当做redis的键， 当前查询到的
	值当做value存在redis里面，下次用户在进行查询数据库的时候会将redis中的键（UUID）传过去，后台进行校验，
	验证通过，就会给用户查询数据，不通过就返回没有登录的信息，可以利用java操作cookie来进行这个活，
	前后台分离可以用前端vue的那一套
	
	往cookie里面存值
	Cookie cookie = new Cookie("token", UUID);
	cookie.setMaxAge(7*24*60*60);   // 七天过期
	cookie.setPath("/");    // 设置cookie的权限
	cookiesetDomain("/jt.com");  设置cookie共享，不设置这个只能在相同的域名内才能得到cookie
	response.addCookie(cookie);
	
	从cookie里面取值
	Cookie[] cookies = Request.getCookies();
	
	注： cookie中的setMaxAge(time); time>0 秒为单位
									time=0 立即删除
									time=-1关闭对话框删除cookie
									
									
五. 拦截器interceptor
	
	1. 创建一个loginInterceptor类，继承一下HandlerInterceptorAdapter类， 重写它的preHandle方法；
		在preHandle方法里面主要做的事情就是验证用户有没有登录，登录放行，没登录重定向到登录页面
		让用户登录
	2.  创建一个配置类myWebMvcConfigurer, 实现一下WebMvcConfigurer接口，重写addInterceptors方法
		在addInterceptors方法里面主要配置要拦截的接口
		
		注： 拦截器里面的值可以通过request对象传递到controller里面
		     存值：request.setAttribute("userId", userId)     取值：request.getAttribute("userId")
			 
			
		
	
	
	
	
	
	
	
	
	
	
	
	
	